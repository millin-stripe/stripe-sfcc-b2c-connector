/**
* Demandware Script File
* Adds credit card into Customer object.
* Creates a new Customer object if it doesn't exists.
*
* @input StripeToken : String
* @input PaymentInstrument : dw.order.PaymentInstrument
* @input Basket : dw.order.Basket
* @input Customer : dw.customer.Customer
* @input BillingForm : dw.web.Form
* @input IsMyAccount : Boolean
* @output StripePaymentError : Object
*
*/
importPackage( dw.system );
importPackage( dw.order );

/* Stripe includes */
var Stripe = require('int_stripe/cartridge/scripts/service/stripe');
var StripeHelper = require('int_stripe/cartridge/scripts/stripeHelper');

function execute( pdict : PipelineDictionary ) : Number
{
	var isMyAccount : Boolean = pdict.IsMyAccount;

	if (StripeHelper.IsStripeEnabled() && !empty(pdict.StripeToken)) {
        var params = {
            StripeToken: pdict.StripeToken,
            PaymentInstrument: pdict.PaymentInstrument
        };
        var result = Stripe.AddCard(params);
        if (result.error) {
        	// if we are coming from My Account section we won't have payment instrument object yet
        	if(!isMyAccount) {
         		var basket : Basket = pdict.Basket;
         		if(basket != null)
         		{
         			basket.removePaymentInstrument(params.PaymentInstrument);
         		}
         	}
         	pdict.StripePaymentError = result.message;
         	return PIPELET_ERROR;
        }
	} else if (StripeHelper.IsStripeEnabled() && pdict.Customer.authenticated) {
    	var billingForm = pdict.BillingForm;
        var paymentInstrument = pdict.PaymentInstrument;
    	var result = Stripe.UpdateCard({PaymentInstrument : paymentInstrument, BillingAddress : billingForm.billingAddress});
    	pdict.StripePaymentError = result;
    	if(result.error){
	    	return PIPELET_ERROR;
    	}
    } else {
    	var result:Object = {error:false};
    	pdict.StripePaymentError = result;
	}

	return PIPELET_NEXT;
}